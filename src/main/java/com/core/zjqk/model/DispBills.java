package com.core.zjqk.model;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;

import org.apache.commons.lang3.StringUtils;

import com.common.config.JdbcUtils;
import com.common.kits.ReturnMsg;
import com.common.kits.Tools;
import com.core.admin.shiro.ShiroUtils;
import com.core.zjqk.model.base.BaseDispBills;
import com.google.common.collect.Lists;
import com.jfinal.core.Controller;
import com.jfinal.plugin.activerecord.Page;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class DispBills extends BaseDispBills<DispBills> {
	
	public static final DispBills dao = new DispBills();
	
	/*
	 * 请款单列表
	 */
	public Page<DispBills> pageOperator(Controller c){
		String classify = ShiroUtils.getClassify();
		String select = "SELECT db.id,db.bill_no billNo,s.`name` sName,db.create_time createTime,a.`name` aName, "
				+ "s.brand,s.contract_subject contractSubject,s.berth_no berthNo,a.account,a.bank,db.pay_date payDate,"
				+ "(CASE `status` WHEN 1 THEN '未提交' WHEN 2 THEN '已提交' WHEN 3 THEN '待支付' WHEN 4 THEN '已支付未开票' WHEN 5 THEN '审批失败' WHEN 6 THEN '部分发票' ELSE '发票已全' END) `status`,"
				+ "(SELECT SUM(money) FROM disp_details dd WHERE dd.flag=1 AND dd.type='" + classify + "' AND db.bill_no=dd.bill_no) totalMoney ";
		StringBuilder sqlExceptSelect = new StringBuilder();
		List<Object> params = Lists.newArrayList();
		sqlExceptSelect.append("FROM disp_bills db LEFT JOIN store s ON db.s_id=s.id "
				+ "LEFT JOIN account a ON db.a_id=a.id WHERE db.flag=1 AND s.classify='" + classify + "' ");
		dbConditions(c, sqlExceptSelect, params);
		String status = c.getPara("status");
		if(StringUtils.isNotBlank(status)){
			sqlExceptSelect.append("AND db.status=? ");
			params.add(status);
		}
		sqlExceptSelect.append("ORDER BY db.id ");
		Integer page = c.getParaToInt("page");
		Integer rows = c.getParaToInt("rows");
		return this.paginate(page, rows, select, sqlExceptSelect.toString(), params.toArray());
	}
	
	/*
	 * 经理审核请款单列表
	 */
	public Page<DispBills> pageManager(Controller c){
		String classify = ShiroUtils.getClassify();
		String select = "SELECT db.id,db.bill_no billNo,s.`name` sName,db.create_time createTime,a.`name` aName, "
				+ "s.brand,s.contract_subject contractSubject,s.berth_no berthNo,a.account,a.bank,db.pay_date payDate,"
				+ "(CASE `status` WHEN 2 THEN '待审批' WHEN 3 THEN '待支付' ELSE '审批失败' END) `status`,"
				+ "(SELECT SUM(money) FROM disp_details dd WHERE dd.flag=1 AND dd.type='" + classify + "' AND db.bill_no=dd.bill_no) totalMoney ";
		StringBuilder sqlExceptSelect = new StringBuilder();
		List<Object> params = Lists.newArrayList();
		sqlExceptSelect.append("FROM disp_bills db LEFT JOIN store s ON db.s_id=s.id "
				+ "LEFT JOIN account a ON db.a_id=a.id WHERE db.flag=1 AND s.classify='" + classify + "' ");
		dbConditions(c, sqlExceptSelect, params);
		String paName = c.getPara("paName");
		if(StringUtils.isNotBlank(paName)){
			sqlExceptSelect.append("AND INSTR(p.`name`, ?) ");
			params.add(paName);
		}
		String status = c.getPara("status");
		if(StringUtils.isNotBlank(status)){
			sqlExceptSelect.append("AND db.status=? ");
			params.add(status);
		}else {
			sqlExceptSelect.append("AND db.status IN(2,3,5) ");
		}
		sqlExceptSelect.append("ORDER BY db.id ");
		Integer page = c.getParaToInt("page");
		Integer rows = c.getParaToInt("rows");
		return this.paginate(page, rows, select, sqlExceptSelect.toString(), params.toArray());
	}
	
	/*
	 * 财务请款单支付列表
	 */
	public Page<DispBills> pageFinancial(Controller c){
		String classify = ShiroUtils.getClassify();
		String select = "SELECT db.id,db.bill_no billNo,s.`name` sName,db.create_time createTime,a.`name` aName, "
				+ "s.brand,s.contract_subject contractSubject,s.berth_no berthNo,a.account,a.bank,db.pay_date payDate,"
				+ "(CASE `status` WHEN 3 THEN '待支付' WHEN 4 THEN '已支付未开票' WHEN 6 THEN '部分发票' ELSE '发票已全' END) `status`,"
				+ "db.actual_date actualDate,db.actual_money actualMoney,db.pay_date payDate,p.`name` paName,"
				+ "(SELECT SUM(money) FROM disp_details dd WHERE dd.flag=1 AND dd.type='" + classify + "' AND db.bill_no=dd.bill_no) totalMoney ";
		StringBuilder sqlExceptSelect = new StringBuilder();
		List<Object> params = Lists.newArrayList();
		sqlExceptSelect.append("FROM disp_bills db "
				+ "LEFT JOIN store s ON db.s_id=s.id "
				+ "LEFT JOIN account a ON db.a_id=a.id "
				+ "LEFT JOIN pay_account p ON db.p_id=p.id WHERE db.flag=1 AND s.classify='" + classify + "' ");
		dbConditions(c, sqlExceptSelect, params);
		String status = c.getPara("status");
		if(StringUtils.isNotBlank(status)){
			sqlExceptSelect.append("AND db.status=? ");
			params.add(status);
		}else {
			sqlExceptSelect.append("AND db.status IN(3,4) ");
		}
		sqlExceptSelect.append("ORDER BY db.id ");
		Integer page = c.getParaToInt("page");
		Integer rows = c.getParaToInt("rows");
		return this.paginate(page, rows, select, sqlExceptSelect.toString(), params.toArray());
	}
	
	public ReturnMsg deletes(String ids){
		Integer orgId = ShiroUtils.getOrgId();
		if(orgId == 1){
			boolean update = false;
			for (String id : ids.split(";")) {
				Connection conn = JdbcUtils.getConnection();
				PreparedStatement psmt = null;
				try {
					psmt = conn.prepareStatement("UPDATE disp_details SET flag=2 WHERE bill_no=(SELECT bill_no FROM disp_bills WHERE id=?) AND type=? ");
					psmt.setString(1, id);
					psmt.setString(2, ShiroUtils.getClassify());
					psmt.executeUpdate();
				} catch (SQLException e) {
					//e.printStackTrace();
					System.out.println("删除一次性请款单失败！");
				} finally {
					JdbcUtils.closeAll(null, null, psmt, conn);
				}
				update = new DispBills().set("id", id).set("flag", 2).update();
				if(update == false){
					break;
				}
			}
			return update ? ReturnMsg.SUCCESS : ReturnMsg.ERROR;
		}else{
			return ReturnMsg.NORIGHT;
		}
	}
	
	public ReturnMsg submits(String ids){
		Integer orgId = ShiroUtils.getOrgId();
		if(orgId == 1){
			boolean update = false;
			for (String id : ids.split(";")) {
				update = new DispBills().set("id", id).set("status", 2).update();
				if(update == false){
					break;
				}
			}
			return update ? ReturnMsg.SUCCESS : ReturnMsg.ERROR;
		}else{
			return ReturnMsg.NORIGHT;
		}
	}
	
	/*
	 * 经理审核通过操作
	 */
	public ReturnMsg passs(String ids){
		boolean update = false;
		for (String id : ids.split(";")) {
			update = new DispBills().set("id", id).set("status", 3)
				.set("spr", ShiroUtils.getUsername()).set("sprq", Tools.ymdStr()).update();
			if(update == false){
				break;
			}
		}
		return update ? ReturnMsg.SUCCESS : ReturnMsg.ERROR;
	}
	
	/*
	 * 经理审核退回
	 */
	public ReturnMsg backs(String ids){
		boolean update = false;
		for (String id : ids.split(";")) {
			update = new DispBills().set("id", id).set("status", 5).update();
			if(update == false){
				break;
			}
		}
		return update ? ReturnMsg.SUCCESS : ReturnMsg.ERROR;
	}
	
	/*
	 * 取消审批通过
	 */
	public ReturnMsg cancels(String ids){
		boolean update = false;
		for (String id : ids.split(";")) {
			update = new DispBills().set("id", id).set("status", 2).update();
			if(update == false){
				break;
			}
		}
		return update ? ReturnMsg.SUCCESS : ReturnMsg.ERROR;
	}
	
	/*
	 * 保存或修改支付信息
	 */
	public ReturnMsg savePaymentInfo(Controller c){
		boolean result = false;
		try {
			String id = c.getPara("id");
			String actualDate = c.getPara("actualDate");
			String actualMoney = c.getPara("actualMoney");
			String paName = c.getPara("paName");
			if(StringUtils.isAnyBlank(paName, actualDate, actualMoney)){
				return ReturnMsg.DATAERROR;
			}
			Integer pId = PayAccount.dao.findPayAccountId(paName);
			DispBills db = new DispBills();
			db.set("p_id", pId)
				.set("status", 4)
				.set("actual_date", actualDate)
				.set("actual_money", actualMoney);
			result = StringUtils.isNoneBlank(id) ? db.set("id", id).update() : db.save();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result ? ReturnMsg.SUCCESS : ReturnMsg.ERROR;
	}
	
	private void dbConditions(Controller c, StringBuilder sqlExceptSelect, List<Object> params) {
		String sTime = c.getPara("sTime");
		if (StringUtils.isNotBlank(sTime)) {
			sqlExceptSelect.append("AND db.create_time >= ? ");
			params.add(sTime);
		}
		String eTime = c.getPara("eTime");
		if (StringUtils.isNotBlank(eTime)) {
			sqlExceptSelect.append("AND db.create_time <= ? ");
			params.add(eTime);
		}
		String billNo = c.getPara("billNo");
		if (StringUtils.isNotBlank(billNo)) {
			sqlExceptSelect.append("AND INSTR(db.bill_no, ?) ");
			params.add(billNo);
		}
		String sName = c.getPara("sName");
		if(StringUtils.isNotBlank(sName)){
			sqlExceptSelect.append("AND INSTR(s.`name`, ?) ");
			params.add(sName);
		}
		String aName = c.getPara("aName");
		if(StringUtils.isNotBlank(aName)){
			sqlExceptSelect.append("AND INSTR(a.`name`, ?) ");
			params.add(aName);
		}
		String pName = c.getPara("pName");
		if(StringUtils.isNotBlank(pName)){
			sqlExceptSelect.append("AND INSTR(p.`name`, ?) ");
			params.add(pName);
		}
		String diName = c.getPara("diName");
		if(StringUtils.isNotBlank(diName)){
			sqlExceptSelect.append("AND di.`name`=? ");
			params.add(diName);
		}
	}
	
	/*
	 * 已付款项目发票收回情况统计表
	 */
	public Page<DispBills> dispInvoiceCount(Controller c){
		StringBuilder sqlExceptSelect = new StringBuilder();
		List<Object> params = Lists.newArrayList();
		String select = dispInvoice(c, sqlExceptSelect, params);
		return this.paginate(c.getParaToInt("page"), c.getParaToInt("rows"), select, sqlExceptSelect.toString(), params.toArray());
	}
	
	/*
	 * 已付款项目发票收回情况统计表导出
	 */
	public List<DispBills> exDispInvoice(Controller c){
		StringBuilder sqlExceptSelect = new StringBuilder();
		List<Object> params = Lists.newArrayList();
		String select = dispInvoice(c, sqlExceptSelect, params);
		return this.find(select + sqlExceptSelect.toString(), params.toArray());
	}
	
	private String dispInvoice(Controller c, StringBuilder sqlExceptSelect, List<Object> params) {
		String classify = ShiroUtils.getClassify();
		String select = "SELECT t.*,(t.actualMoney-t.totalMoney) otherMoney ";
		sqlExceptSelect.append("FROM(SELECT db.id,db.create_time createTime,db.bill_no billNo,s.`name` sName,db.actual_money actualMoney,p.`name` pName,"
				+ "IFNULL((SELECT SUM(money) FROM invoice i WHERE i.flag=1 AND i.bill_no=db.bill_no AND classify='"+classify+"'),0) totalMoney,"+Tools.statusConvertor()
				+ "FROM disp_bills db LEFT JOIN store s ON db.s_id=s.id LEFT JOIN pay_account p ON db.p_id=p.id WHERE db.flag=1 AND lb='" + classify + "'");
		dbConditions(c, sqlExceptSelect, params);
		String status = c.getPara("status");
		if(StringUtils.isNotBlank(status)){
			sqlExceptSelect.append("AND db.status=? ");
			params.add(status);
		}else {
			sqlExceptSelect.append("AND db.status IN(4,6,7) ");
		}
		sqlExceptSelect.append(") t ");
		return select;
	}
	
	
	/*
	 * 一次性费用统计
	 */
	public Page<DispBills> dispFeesCount(Controller c){
		StringBuilder sqlExceptSelect = new StringBuilder();
		List<Object> params = Lists.newArrayList();
		String select = dispFeesCount(c, sqlExceptSelect, params);
		return this.paginate(c.getParaToInt("page"), c.getParaToInt("rows"), select, sqlExceptSelect.toString(), params.toArray());
	}
	
	/*
	 * 一次性费用统计导出
	 */
	public List<DispBills> exDispFeesCount(Controller c){
		StringBuilder sqlExceptSelect = new StringBuilder();
		List<Object> params = Lists.newArrayList();
		String select = dispFeesCount(c, sqlExceptSelect, params);
		return this.find(select + sqlExceptSelect.toString(), params.toArray());
	}
	
	private String dispFeesCount(Controller c, StringBuilder sqlExceptSelect, List<Object> params) {
		String classify = ShiroUtils.getClassify();
		String select = "SELECT t.*,(t.totalMoney-t.actualMoney) nopayMoney ";
		sqlExceptSelect.append("FROM (SELECT db.id,db.create_time createTime,db.bill_no billNo,s.`name` sName,a.`name` aName,"
				+ "(SELECT SUM(money) FROM disp_details dd WHERE dd.flag=1 AND type='" + classify + "' AND db.bill_no=dd.bill_no) totalMoney,"
				+ "db.pay_date payDate,db.actual_date actualDate,db.actual_money actualMoney,p.`name` pName,p.account,p.bank,"
				+ Tools.statusConvertor() + "FROM disp_bills db LEFT JOIN store s ON db.s_id=s.id "
				+ "LEFT JOIN account a ON db.a_id = a.id LEFT JOIN pay_account p ON db.p_id=p.id WHERE db.flag=1 AND lb='" + classify + "' ");
		dbConditions(c, sqlExceptSelect, params);
		String status = c.getPara("status");
		if(StringUtils.isNotBlank(status)){
			sqlExceptSelect.append("AND status=? ");
			params.add(status);
		}
		sqlExceptSelect.append(") t ");
		return select;
	}
	
	/*
	 * 一次性费用统计
	 */
	public Page<DispBills> dispDetailsData(Controller c){
		StringBuilder sqlExceptSelect = new StringBuilder();
		List<Object> params = Lists.newArrayList();
		String select = dispDetailsData(c, sqlExceptSelect, params);
		return this.paginate(c.getParaToInt("page"), c.getParaToInt("rows"), select, sqlExceptSelect.toString(), params.toArray());
	}
	
	/*
	 * 一次性费用统计导出
	 */
	public List<DispBills> exDispDetailsData(Controller c){
		StringBuilder sqlExceptSelect = new StringBuilder();
		List<Object> params = Lists.newArrayList();
		String select = dispDetailsData(c, sqlExceptSelect, params);
		return this.find(select + sqlExceptSelect.toString(), params.toArray());
	}
	
	private String dispDetailsData(Controller c, StringBuilder sqlExceptSelect, List<Object> params) {
		String classify = ShiroUtils.getClassify();
		String select = "SELECT db.create_time createTime,db.bill_no billNo,s.`name` sName,"
				+ "di.`name` diName,dd.money,db.actual_date actualDate,"+Tools.statusConvertor();
		sqlExceptSelect.append(" FROM disp_details dd "
				+ "LEFT JOIN disp_bills db ON db.bill_no=dd.bill_no "
				+ "LEFT JOIN disp_items di ON dd.d_id=di.id "
				+ "LEFT JOIN store s ON s.id=dd.s_id "
				+ "LEFT JOIN account a ON db.a_id=a.id "
				+ "WHERE db.flag=1 AND dd.flag=1 AND lb='"+classify+"' AND type='"+classify+"' ");
		dbConditions(c, sqlExceptSelect, params);
		String status = c.getPara("status");
		if(StringUtils.isNotBlank(status)){
			sqlExceptSelect.append("AND status=? ");
			params.add(status);
		}
		sqlExceptSelect.append("ORDER BY db.bill_no");
		return select;
	}
	
	/*
	 * 可回收资金管理表
	 */
	public Page<DispBills> fundMgt(Controller c){
		StringBuilder sqlExceptSelect = new StringBuilder();
		List<Object> params = Lists.newArrayList();
		String select = comSQL3(c, sqlExceptSelect, params);
		return this.paginate(c.getParaToInt("page"), c.getParaToInt("rows"), select, sqlExceptSelect.toString(), params.toArray());
	}
	
	/*
	 * 可回收资金管理表导出
	 */
	public List<DispBills> exFundMgt(Controller c){
		StringBuilder sqlExceptSelect = new StringBuilder();
		List<Object> params = Lists.newArrayList();
		String select = comSQL3(c, sqlExceptSelect, params);
		return this.find(select + sqlExceptSelect.toString(), params.toArray());
	}
	
	private String comSQL3(Controller c, StringBuilder sqlExceptSelect, List<Object> params) {
		String classify = ShiroUtils.getClassify();
		String s = "(SELECT SUM(dd.money) FROM disp_details dd "
				+ "LEFT JOIN disp_bills db ON db.bill_no=dd.bill_no "
				+ "WHERE db.`status` IN(4,6,7) AND db.flag=1 AND dd.flag=1 AND lb='"+classify+"' ";
		String select = "SELECT s.id,s.`name` sName,s.opening_date openingDate,s.close_date closeDate,"
				+ s + "AND dd.d_id='1' AND dd.s_id=s.id) zlbzj,"
				+ s + "AND dd.d_id='2' AND dd.s_id=s.id) zxyj,"
				+ s + "AND dd.d_id='3' AND dd.s_id=s.id) ggsyyj,"
				+ s + "AND dd.d_id='4' AND dd.s_id=s.id) sdbzj,"
				+ s + "AND dd.d_id='5' AND dd.s_id=s.id) posyj,"
				+ s + "AND dd.d_id='6' AND dd.s_id=s.id) crzyj,"
				+ s + "AND dd.d_id='7' AND dd.s_id=s.id) spzlbzj ";
		sqlExceptSelect.append("FROM store s WHERE s.flag=1 AND s.classify='" + classify + "' ");
		dbConditions(c, sqlExceptSelect, params);
		sqlExceptSelect.append("ORDER BY s.opening_date");
		return select;
	}
	
	public DispBills dispBillById(String id) {
		String sql = "SELECT db.id,db.create_time createTime,db.bill_no billNo,s.`name` sName,a.`name` aName,s.brand,"
				+ "s.contract_subject contractSubject,s.berth_no berthNo,a.account,a.bank,db.pay_date payDate,db.zdr,db.spr,db.sprq "
				+ "FROM disp_bills db LEFT JOIN store s ON db.s_id=s.id LEFT JOIN account a ON db.a_id=a.id WHERE db.id=?";
		return this.findFirst(sql, id);
	}
	
}
