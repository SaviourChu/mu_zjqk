package com.core.zjqk.model;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;

import org.apache.commons.lang3.StringUtils;

import com.common.config.JdbcUtils;
import com.common.kits.ReturnMsg;
import com.common.kits.Tools;
import com.core.admin.shiro.ShiroUtils;
import com.core.zjqk.model.base.BaseDispDetails;
import com.google.common.collect.Lists;
import com.jfinal.core.Controller;
import com.jfinal.plugin.activerecord.Page;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class DispDetails extends BaseDispDetails<DispDetails> {
	
	public static final DispDetails dao = new DispDetails();
	
	public Page<DispDetails> page(Controller c){
		String select = "SELECT dd.id,di.`name` diName,dd.init_fee initFee,dd.money,dd.remarks ";
		StringBuilder sqlExceptSelect = new StringBuilder();
		List<Object> params = Lists.newArrayList();
		sqlExceptSelect.append("FROM disp_details dd LEFT JOIN disp_items di ON di.id=dd.d_id WHERE dd.flag=1 AND type='"+ShiroUtils.getClassify()+"' ");
		String billNo = c.getPara("billNo");
		if(StringUtils.isNotBlank(billNo)){
			sqlExceptSelect.append("AND INSTR(dd.bill_no, ?) ");
			params.add(billNo);
		}
		sqlExceptSelect.append("ORDER BY dd.id ");
		return this.paginate(c.getParaToInt("page"), c.getParaToInt("rows"), select, sqlExceptSelect.toString(), params.toArray());
	}
	
	public ReturnMsg saveOrUpdate(Controller c){
		try {
			boolean result = false;
			Integer orgId = ShiroUtils.getOrgId();
			String classify = ShiroUtils.getClassify();
			String rowId = c.getPara("rowId");
			if (orgId == 1) {
				String billNo = c.getPara("billNo");
				String sName = c.getPara("sName");
				String aName = c.getPara("aName");
				String payDate = c.getPara("payDate");
				String diName = c.getPara("diName");
				String money = c.getPara("money");
				String remarks = c.getPara("remarks");
				
				if (StringUtils.isAnyBlank(sName, aName, diName, payDate)) {
					return ReturnMsg.DATAERROR;
				}
				String initFee = c.getPara("initFee");
				if (StringUtils.isBlank(initFee) || "暂无".equals(initFee) || "计算有误".equals(initFee)) {
					initFee = "0";
				}
				//未手动输入费用默认为初始化费用值
				if (StringUtils.isBlank(money)) {
					money = initFee;
				}
				
				Integer sId = Store.dao.findStoreId(sName);
				Integer aId = Account.dao.findAccountId(aName, sName);
				Integer diId = DispItems.dao.findDispItemsId(diName);
				
				String sql1 = "SELECT COUNT(1) count FROM disp_bills WHERE flag=1 AND lb=? AND s_id=? AND a_id=? AND bill_no=? AND pay_date=? ";
				Long count = this.findFirst(sql1, classify, sId, aId, billNo, payDate).getLong("count");
				//count>0 表示查询到了记录，说明请款单头部没有修改，那么，只会向明细表中添加记录，否则请款单和明细表都要保存数据；count<=0 表示有修改
				if(count>0){
					DispDetails dd = new DispDetails();
					dd.set("bill_no", billNo)
						.set("s_id", sId)
						.set("d_id", diId)
						.set("init_fee", initFee)
						.set("money", money)
						.set("type", ShiroUtils.getClassify())
						.set("remarks", remarks);
					result = dd.save();
				}else{
					if(StringUtils.isBlank(rowId)){
						DispDetails dd = new DispDetails();
						dd.set("bill_no", billNo)
							.set("s_id", sId)
							.set("d_id", diId)
							.set("init_fee", initFee)
							.set("money", money)
							.set("type", ShiroUtils.getClassify())
							.set("remarks", remarks);
						DispBills db = new DispBills();
						db.set("s_id", sId)
							.set("a_id", aId)
							.set("pay_date", payDate)
							.set("zdr", ShiroUtils.getUsername())
							.set("create_time", Tools.ymdStr())
							.set("lb", ShiroUtils.getClassify())
							.set("bill_no", billNo);
						TVar.dao.saveBillNo(1, billNo);
						result = db.save() && dd.save();
					}else{
						return ReturnMsg.PROMPTINFO;
					}
				}
				return result ? ReturnMsg.SUCCESS : ReturnMsg.ERROR;
			} else {
				return ReturnMsg.NORIGHT;
			}
		} catch (Exception e) {
			return ReturnMsg.ERROR;
		}
	}
	
	public ReturnMsg editBillInfo(Controller c) {
		try {
			Integer orgId = ShiroUtils.getOrgId();
			String classify = ShiroUtils.getClassify();
			if (orgId == 1) {
				String rowId = c.getPara("rowId");//选中ID标识
				String danhao = c.getPara("danhao");//单号
				String dpmc = c.getPara("dpmc").trim();//店铺名称
				String skzh = c.getPara("skzh").trim();//收款账户名称
				String zfrq = c.getPara("zfrq").trim();//支付日期
				
				Integer sId = Store.dao.findStoreId(dpmc);
				Integer aId = Account.dao.findAccountId(skzh, dpmc);
				
				String sql = "SELECT COUNT(1) count FROM disp_bills WHERE flag=1 AND lb=? AND s_id=? AND a_id=? AND bill_no=? AND pay_date=? ";
				Long count = this.findFirst(sql, classify, sId, aId, danhao, zfrq).getLong("count");
				//count>0 表示查询到了记录，说明请款单头部没有修改，count<=0 表示有修改
				if(count <= 0){
					//根据 ID对 disp_bills表执行更新操作
					DispBills db = new DispBills();
					db.set("id", rowId)
						.set("s_id", sId)
						.set("a_id", aId)
						.set("pay_date", zfrq);
					Connection conn = JdbcUtils.getConnection();
					PreparedStatement psmt = null;
					try {
						//根据单号和模块标识更新disp_details表的店铺ID
						psmt = conn.prepareStatement("UPDATE disp_details SET s_id=? WHERE bill_no=? AND type=? AND flag=1");
						psmt.setInt(1, sId);
						psmt.setString(2, danhao);
						psmt.setString(3, classify);
						int i = psmt.executeUpdate();
						if(i == 0){
							return ReturnMsg.DATAERROR;
						}
					} catch (SQLException e) {
						//e.printStackTrace();
						System.out.println("更新请款单信息失败！");
					} finally {
						JdbcUtils.closeAll(null, null, psmt, conn);
					}
					return db.update() ? ReturnMsg.SUCCESS : ReturnMsg.ERROR;
				}else{
					return ReturnMsg.REPEATERROR;
				}
			} else {
				return ReturnMsg.NORIGHT;
			}
		} catch (Exception e) {
			return ReturnMsg.ERROR;
		}
	}
	
	public ReturnMsg delete(String id){
		Integer orgId = ShiroUtils.getOrgId();
		if (orgId == 1) {
			DispDetails dd = new DispDetails();
			dd.set("id", id).set("flag", 2);
			return dd.update() ? ReturnMsg.SUCCESS : ReturnMsg.ERROR;
		} else {
			return ReturnMsg.NORIGHT;
		}
	}
	
	public String findInitFee(Controller c){
		String initFee = "暂无";
		try {
			String sName = c.getPara("sName");
			String diName = c.getPara("diName");
			String sql = "SELECT df.init_fee initFee FROM disp_initfees df LEFT JOIN store s ON df.s_id=s.id "
					+ "LEFT JOIN disp_items di ON df.d_id=di.id WHERE df.del_flag=1 AND s.`name`=? AND di.`name`=? ";
			DispDetails dd = this.findFirst(sql, sName, diName);
			if(dd != null){
				initFee = dd.get("initFee");
			}
		} catch (Exception e) {
			initFee = "计算有误";
		}
		return initFee;
	}
	
	public Double totalAmount(String billNo){
		String sql = "SELECT SUM(money) totalAmount FROM disp_details WHERE flag=1 AND type='"+ShiroUtils.getClassify()+"' AND bill_no=? ";
		Double result = this.findFirst(sql, billNo).getDouble("totalAmount");
		return result != null ? result : 0.0;
	}
	
	public List<DispDetails> dispDetailsByBillNo(String id) {
		String sql = "SELECT dd.id,di.`name` diName,dd.money,dd.remarks,"
				+ "(SELECT SUM(money) FROM disp_details WHERE flag=1 AND bill_no=? AND type='"+ShiroUtils.getClassify()+"') totalMoney "
				+ "FROM disp_details dd LEFT JOIN disp_items di ON di.id=dd.d_id WHERE dd.flag=1 AND dd.bill_no=? AND type='"+ShiroUtils.getClassify()+"'";
		return this.find(sql, id, id);
	}
	
	public Page<DispDetails> fundMgtmx(Controller c){
		String select = "SELECT dd.bill_no billNo,di.`name` diName,dd.money,dd.remarks ";
		String sqlExceptSelect = "FROM disp_details dd "
				+ "LEFT JOIN disp_items di ON dd.d_id=di.id "
				+ "LEFT JOIN store s ON s.id=dd.s_id "
				+ "LEFT JOIN disp_bills db ON db.bill_no=dd.bill_no "
				+ "WHERE dd.d_id IN(1,2,3,4,5,6,7) AND db.flag=1 AND dd.flag=1 AND db.`status` IN (4,6,7) AND lb=? AND s.`name`=?";
		return this.paginate(c.getParaToInt("page"), c.getParaToInt("rows"), select, sqlExceptSelect, ShiroUtils.getClassify(), c.getPara("sName"));
	}
	
}
