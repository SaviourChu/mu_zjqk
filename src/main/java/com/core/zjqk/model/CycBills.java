package com.core.zjqk.model;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;

import org.apache.commons.lang3.StringUtils;

import com.common.config.JdbcUtils;
import com.common.kits.ReturnMsg;
import com.common.kits.Tools;
import com.core.admin.shiro.ShiroUtils;
import com.core.zjqk.model.base.BaseCycBills;
import com.google.common.collect.Lists;
import com.jfinal.core.Controller;
import com.jfinal.plugin.activerecord.Page;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class CycBills extends BaseCycBills<CycBills> {
	
	public static final CycBills dao = new CycBills();
	
	/*
	 * 请款单列表
	 */
	public Page<CycBills> pageOperator(Controller c){
		String classify = ShiroUtils.getClassify();
		String select = "SELECT cb.id,cb.ym,cb.bill_no billNo,s.`name` sName,cb.create_time createTime,a.`name` aName, "
				+ "s.brand,s.contract_subject contractSubject,s.berth_no berthNo,a.account,a.bank,cb.pay_date payDate,"
				+ "(CASE `status` WHEN 1 THEN '未提交' WHEN 2 THEN '已提交' WHEN 3 THEN '待支付' WHEN 4 THEN '已支付未开票' WHEN 5 THEN '审批失败' WHEN 6 THEN '部分发票' ELSE '发票已全' END) `status`,"
				+ "(SELECT SUM(money) FROM cyc_details cd WHERE cd.flag=1 AND cd.type='" + classify + "' AND cb.bill_no=cd.bill_no) totalMoney ";
		StringBuilder sqlExceptSelect = new StringBuilder();
		List<Object> params = Lists.newArrayList();
		sqlExceptSelect.append("FROM cyc_bills cb LEFT JOIN store s ON cb.s_id=s.id "
				+ "LEFT JOIN account a ON cb.a_id=a.id WHERE cb.flag=1 AND lb='" + classify + "' ");
		cbConditions(c, sqlExceptSelect, params);
		String dayNum = c.getPara("dayNum");
		if (StringUtils.isNotBlank(dayNum)) {
			sqlExceptSelect.append("AND s.payment_day = ? ");
			params.add(dayNum);
		}
		String status = c.getPara("status");
		if(StringUtils.isNotBlank(status)){
			sqlExceptSelect.append("AND cb.status = ? ");
			params.add(status);
		}
		sqlExceptSelect.append("ORDER BY cb.id ");
		Integer page = c.getParaToInt("page");
		Integer rows = c.getParaToInt("rows");
		return this.paginate(page, rows, select, sqlExceptSelect.toString(), params.toArray());
	}

	/*
	 * 经理审核请款单列表
	 */
	public Page<CycBills> pageManager(Controller c){
		String classify = ShiroUtils.getClassify();
		String select = "SELECT cb.id,cb.bill_no billNo,s.`name` sName,cb.create_time createTime,a.`name` aName,"
				+ "s.brand,s.contract_subject contractSubject,s.berth_no berthNo,a.account,a.bank,cb.pay_date payDate,"
				+ "(CASE `status` WHEN 2 THEN '待审批' WHEN 3 THEN '待支付' ELSE '审批失败' END) `status`,"
				+ "(SELECT SUM(money) FROM cyc_details cd WHERE cd.flag=1 AND cd.type='" + classify + "' AND cb.bill_no=cd.bill_no) totalMoney ";
		StringBuilder sqlExceptSelect = new StringBuilder();
		List<Object> params = Lists.newArrayList();
		sqlExceptSelect.append("FROM cyc_bills cb LEFT JOIN store s ON cb.s_id=s.id "
				+ "LEFT JOIN account a ON cb.a_id=a.id WHERE cb.flag=1 AND lb='" + classify + "' ");
		cbConditions(c, sqlExceptSelect, params);
		String paName = c.getPara("paName");
		if(StringUtils.isNotBlank(paName)){
			sqlExceptSelect.append("AND INSTR(p.`name`, ?) ");
			params.add(paName);
		}
		String status = c.getPara("status");
		if(StringUtils.isNotBlank(status)){
			sqlExceptSelect.append("AND cb.status = ? ");
			params.add(status);
		}else {
			sqlExceptSelect.append("AND cb.status IN(2,3,5) ");
		}
		sqlExceptSelect.append("ORDER BY cb.id ");
		Integer page = c.getParaToInt("page");
		Integer rows = c.getParaToInt("rows");
		return this.paginate(page, rows, select, sqlExceptSelect.toString(), params.toArray());
	}
	
	/*
	 * 财务请款单支付列表
	 */
	public Page<CycBills> pageFinancial(Controller c){
		String classify = ShiroUtils.getClassify();
		String select = "SELECT cb.id,cb.bill_no billNo,s.`name` sName,cb.create_time createTime,a.`name` aName, "
				+ "s.brand,s.contract_subject contractSubject,s.berth_no berthNo,a.account,a.bank,cb.pay_date payDate,"
				+ "(CASE `status` WHEN 3 THEN '待支付' WHEN 4 THEN '已支付未开票' WHEN 6 THEN '部分发票' ELSE '发票已全' END) `status`,"
				+ "cb.actual_date actualDate,cb.actual_money actualMoney,cb.pay_date payDate,p.`name` paName,"
				+ "(SELECT SUM(money) FROM cyc_details cd WHERE cd.flag=1 AND cd.type='" + classify + "' AND cb.bill_no=cd.bill_no) totalMoney ";
		StringBuilder sqlExceptSelect = new StringBuilder();
		List<Object> params = Lists.newArrayList();
		sqlExceptSelect.append("FROM cyc_bills cb LEFT JOIN store s ON cb.s_id=s.id LEFT JOIN account a ON cb.a_id=a.id "
				+ "LEFT JOIN pay_account p ON cb.p_id=p.id WHERE cb.flag =1 AND lb='" + classify + "' ");
		cbConditions(c, sqlExceptSelect, params);
		String status = c.getPara("status");
		if(StringUtils.isNotBlank(status)){
			sqlExceptSelect.append("AND cb.status = ? ");
			params.add(status);
		}else {
			sqlExceptSelect.append("AND cb.status IN(3,4,6,7) ");
		}
		sqlExceptSelect.append("ORDER BY cb.id ");
		Integer page = c.getParaToInt("page");
		Integer rows = c.getParaToInt("rows");
		return this.paginate(page, rows, select, sqlExceptSelect.toString(), params.toArray());
	}
	
	public ReturnMsg deletes(String ids){
		Integer orgId = ShiroUtils.getOrgId();
		if(orgId == 1){
			boolean update = false;
			for (String id : ids.split(";")) {
				Connection conn = JdbcUtils.getConnection();
				PreparedStatement psmt = null;
				try {
					psmt = conn.prepareStatement("UPDATE cyc_details SET flag=2 WHERE bill_no=(SELECT bill_no FROM cyc_bills WHERE id=?) AND type=? ");
					psmt.setString(1, id);
					psmt.setString(2, ShiroUtils.getClassify());
					psmt.executeUpdate();
				} catch (SQLException e) {
					//e.printStackTrace();
					System.out.println("删除周期性请款单失败！");
				} finally {
					JdbcUtils.closeAll(null, null, psmt, conn);
				}
				update = new CycBills().set("id", id).set("flag", 2).update();
				if(update == false){
					break;
				}
			}
			return update ? ReturnMsg.SUCCESS : ReturnMsg.ERROR;
		}else{
			return ReturnMsg.NORIGHT;
		}
	}
	
	public ReturnMsg submits(String ids){
		Integer orgId = ShiroUtils.getOrgId();
		if(orgId == 1){
			boolean update = false;
			for (String id : ids.split(";")) {
				update = new CycBills().set("id", id).set("status", 2).update();
				if(update == false){
					break;
				}
			}
			return update ? ReturnMsg.SUCCESS : ReturnMsg.ERROR;
		}else{
			return ReturnMsg.NORIGHT;
		}
	}
	
	/*
	 * 经理审核通过操作
	 */
	public ReturnMsg passs(String ids){
		Integer orgId = ShiroUtils.getOrgId();
		if(orgId == 1){
			boolean update = false;
			for (String id : ids.split(";")) {
				update = new CycBills().set("id", id).set("status", 3)
					.set("spr", ShiroUtils.getUsername()).set("sprq", Tools.ymdStr()).update();
				if(update == false){
					break;
				}
			}
			return update ? ReturnMsg.SUCCESS : ReturnMsg.ERROR;
		}else{
			return ReturnMsg.NORIGHT;
		}
	}
	
	/*
	 * 经理审核退回
	 */
	public ReturnMsg backs(String ids){
		Integer orgId = ShiroUtils.getOrgId();
		if(orgId == 1){
			boolean update = false;
			for (String id : ids.split(";")) {
				update = new CycBills().set("id", id).set("status", 5).update();
				if(update == false){
					break;
				}
			}
			return update ? ReturnMsg.SUCCESS : ReturnMsg.ERROR;
		}else{
			return ReturnMsg.NORIGHT;
		}
	}
	
	/*
	 * 经理取消审核通过
	 */
	public ReturnMsg cancels(String ids){
		Integer orgId = ShiroUtils.getOrgId();
		if(orgId == 1){
			boolean update = false;
			for (String id : ids.split(";")) {
				update = new CycBills().set("id", id).set("status", 2).update();
				if(update == false){
					break;
				}
			}
			return update ? ReturnMsg.SUCCESS : ReturnMsg.ERROR;
		}else{
			return ReturnMsg.NORIGHT;
		}
	}
	
	/*
	 * 保存或修改支付信息
	 */
	public ReturnMsg savePaymentInfo(Controller c){
		Integer orgId = ShiroUtils.getOrgId();
		if(orgId == 1){
			boolean result = false;
			try {
				String id = c.getPara("id");
				String actualDate = c.getPara("actualDate");
				String actualMoney = c.getPara("actualMoney");
				String paName = c.getPara("paName");
				if(StringUtils.isAnyBlank(paName, actualDate, actualMoney)){
					return ReturnMsg.DATAERROR;
				}
				Integer pId = PayAccount.dao.findPayAccountId(paName);
				CycBills cb = new CycBills();
					cb.set("p_id", pId)
						.set("status", 4)
						.set("actual_date", actualDate)
						.set("actual_money", actualMoney);
				result = StringUtils.isNoneBlank(id) ? cb.set("id", id).update() : cb.save();
			} catch (Exception e) {
				e.printStackTrace();
			}
			return result ? ReturnMsg.SUCCESS : ReturnMsg.ERROR;
		}else{
			return ReturnMsg.NORIGHT;
		}
	}
	
	private static void cbConditions(Controller c, StringBuilder sqlExceptSelect, List<Object> params) {
		String sTime = c.getPara("sTime");
		if (StringUtils.isNotBlank(sTime)) {
			sqlExceptSelect.append("AND cb.create_time >= ? ");
			params.add(sTime);
		}
		String eTime = c.getPara("eTime");
		if (StringUtils.isNotBlank(eTime)) {
			sqlExceptSelect.append("AND cb.create_time <= ? ");
			params.add(eTime);
		}
		String szTime = c.getPara("szTime");
		if (StringUtils.isNotBlank(szTime)) {
			sqlExceptSelect.append("AND cb.actual_date >= ? ");
			params.add(szTime);
		}
		String ezTime = c.getPara("ezTime");
		if (StringUtils.isNotBlank(ezTime)) {
			sqlExceptSelect.append("AND cb.actual_date <= ? ");
			params.add(ezTime);
		}
		String billNo = c.getPara("billNo");
		if (StringUtils.isNotBlank(billNo)) {
			sqlExceptSelect.append("AND INSTR(cb.bill_no, ?) ");
			params.add(billNo.trim());
		}
		String sName = c.getPara("sName");
		if(StringUtils.isNotBlank(sName)){
			sqlExceptSelect.append("AND INSTR(s.`name`, ?) ");
			params.add(sName.trim());
		}
		String aName = c.getPara("aName");
		if(StringUtils.isNotBlank(aName)){
			sqlExceptSelect.append("AND INSTR(a.`name`, ?) ");
			params.add(aName.trim());
		}
		String ciName = c.getPara("ciName");
		if(StringUtils.isNotBlank(ciName)){
			sqlExceptSelect.append("AND ci.`name` = ? ");
			params.add(ciName.trim());
		}
		String cbym = c.getPara("cbym");
		if(StringUtils.isNotBlank(cbym)){
			sqlExceptSelect.append("AND cb.ym = ? ");
			params.add(cbym.trim());
		}
	}
	
	/*
	 * 已付款项目发票收回情况统计表
	 */
	public Page<CycBills> cycInvoiceCount(Controller c){
		StringBuilder sqlExceptSelect = new StringBuilder();
		List<Object> params = Lists.newArrayList();
		String select = cycInvoice(c, sqlExceptSelect, params);
		return this.paginate(c.getParaToInt("page"), c.getParaToInt("rows"), select, sqlExceptSelect.toString(), params.toArray());
	}
	
	/*
	 * 已付款项目发票收回情况统计表导出
	 */
	public List<CycBills> exCycInvoice(Controller c){
		StringBuilder sqlExceptSelect = new StringBuilder();
		List<Object> params = Lists.newArrayList();
		String select = cycInvoice(c, sqlExceptSelect, params);
		return this.find(select + sqlExceptSelect.toString(), params.toArray());
	}
	
	private String cycInvoice(Controller c, StringBuilder sqlExceptSelect, List<Object> params) {
		String classify = ShiroUtils.getClassify();
		String select = "SELECT t.*,(t.actualMoney-t.totalMoney) otherMoney ";
		sqlExceptSelect.append("FROM(SELECT cb.id,cb.create_time createTime,cb.bill_no billNo,s.`name` sName,cb.actual_money actualMoney,p.`name` pName,"
				+ "IFNULL((SELECT SUM(money) FROM invoice i WHERE i.flag=1 AND i.bill_no=cb.bill_no AND classify='"+classify+"'),0) totalMoney,"+Tools.statusConvertor()
				+ "FROM cyc_bills cb LEFT JOIN store s ON cb.s_id=s.id LEFT JOIN pay_account p ON cb.p_id=p.id WHERE cb.flag=1 AND lb='" + classify + "' ");
		cbConditions(c, sqlExceptSelect, params);
		String status = c.getPara("status");
		if(StringUtils.isNotBlank(status)){
			sqlExceptSelect.append("AND cb.status = ? ");
			params.add(status);
		}else {
			sqlExceptSelect.append("AND cb.status IN(4,6,7) ");
		}
		sqlExceptSelect.append(") t ");
		return select;
	}
	
	/*
	 * 周期性费用统计
	 */
	public Page<CycBills> cycFeesCount(Controller c){
		StringBuilder sqlExceptSelect = new StringBuilder();
		List<Object> params = Lists.newArrayList();
		String select = cycFeesCount(c, sqlExceptSelect, params);
		return this.paginate(c.getParaToInt("page"), c.getParaToInt("rows"), select, sqlExceptSelect.toString(), params.toArray());
	}
	
	/*
	 * 周期性费用统计导出
	 */
	public List<CycBills> exCycFeesCount(Controller c){
		StringBuilder sqlExceptSelect = new StringBuilder();
		List<Object> params = Lists.newArrayList();
		String select = cycFeesCount(c, sqlExceptSelect, params);
		return this.find(select + sqlExceptSelect.toString(), params.toArray());
	}
	
	private String cycFeesCount(Controller c, StringBuilder sqlExceptSelect, List<Object> params) {
		String classify = ShiroUtils.getClassify();
		String select = "SELECT t.*,(t.totalMoney-t.actualMoney) nopayMoney ";
		sqlExceptSelect.append("FROM (SELECT cb.id,cb.ym,cb.create_time createTime,cb.bill_no billNo,s.`name` sName,a.`name` aName,"
				+ "(SELECT SUM(money) FROM cyc_details cd WHERE cd.flag=1 AND type='" + classify + "' AND cb.bill_no=cd.bill_no) totalMoney,"
				+ "cb.pay_date payDate,cb.actual_date actualDate,cb.actual_money actualMoney,p.`name` pName,p.account,p.bank,"
				+ Tools.statusConvertor() + "FROM cyc_bills cb LEFT JOIN store s ON cb.s_id=s.id "
				+ "LEFT JOIN account a ON cb.a_id = a.id LEFT JOIN pay_account p ON cb.p_id=p.id WHERE cb.flag=1 AND lb='" + classify + "' ");
		cbConditions(c, sqlExceptSelect, params);
		String dayNum = c.getPara("dayNum");
		if (StringUtils.isNotBlank(dayNum)) {
			sqlExceptSelect.append("AND s.payment_day = ? ");
			params.add(dayNum);
		}
		String status = c.getPara("status");
		if(StringUtils.isNotBlank(status)){
			sqlExceptSelect.append("AND status = ? ");
			params.add(status);
		}
		sqlExceptSelect.append(") t ");
		return select;
	}
	
	/*
	 * 周期性费用明细统计
	 */
	public Page<CycBills> cycDetailsData(Controller c){
		StringBuilder sqlExceptSelect = new StringBuilder();
		List<Object> params = Lists.newArrayList();
		String select = cycDetailsData(c, sqlExceptSelect, params);
		return this.paginate(c.getParaToInt("page"), c.getParaToInt("rows"), select, sqlExceptSelect.toString(), params.toArray());
	}
	
	/*
	 * 周期性费用明细统计导出
	 */
	public List<CycBills> exCycDetailsData(Controller c){
		StringBuilder sqlExceptSelect = new StringBuilder();
		List<Object> params = Lists.newArrayList();
		String select = cycDetailsData(c, sqlExceptSelect, params);
		return this.find(select + sqlExceptSelect.toString(), params.toArray());
	}
	
	private String cycDetailsData(Controller c, StringBuilder sqlExceptSelect, List<Object> params) {
		String classify = ShiroUtils.getClassify();
		String select = "SELECT cb.ym,cb.create_time createTime,cb.bill_no billNo,s.`name` sName,cd.start_time startTime,ci.`name` ciName,cd.money,"
				+ "cb.actual_date actualDate,cd.end_time endTime,"+Tools.statusConvertor();
		sqlExceptSelect.append(" FROM cyc_details cd "
				+ "LEFT JOIN cyc_bills cb ON cb.bill_no=cd.bill_no "
				+ "LEFT JOIN cyc_items ci ON cd.c_id=ci.id "
				+ "LEFT JOIN store s ON s.id=cd.s_id "
				+ "LEFT JOIN account a ON cb.a_id=a.id "
				+ "WHERE cb.flag=1 AND cd.flag=1 AND lb='"+classify+"' AND type='"+classify+"' ");
		cbConditions(c, sqlExceptSelect, params);
		String status = c.getPara("status");
		if(StringUtils.isNotBlank(status)){
			sqlExceptSelect.append("AND status = ? ");
			params.add(status);
		}
		sqlExceptSelect.append("ORDER BY cb.bill_no");
		return select;
	}
	
	
	public CycBills cycBillById(String id) {
		String sql = "SELECT cb.id,cb.create_time createTime,cb.bill_no billNo,s.`name` sName,a.`name` aName,s.brand,"
				+ "s.contract_subject contractSubject,s.berth_no berthNo,a.account,a.bank,cb.pay_date payDate,cb.zdr,cb.spr,cb.sprq "
				+ "FROM cyc_bills cb LEFT JOIN store s ON cb.s_id = s.id LEFT JOIN account a ON cb.a_id = a.id WHERE cb.id=?";
		return this.findFirst(sql, id);
	}
}
