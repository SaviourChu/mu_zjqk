package com.core.zjqk.model;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.List;
import java.util.Objects;

import org.apache.commons.lang3.StringUtils;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.DateUtil;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import com.common.config.JdbcUtils;
import com.common.kits.ReturnMsg;
import com.core.admin.shiro.ShiroUtils;
import com.core.zjqk.model.base.BaseRentOpt;
import com.google.common.collect.Lists;
import com.jfinal.core.Controller;
import com.jfinal.plugin.activerecord.Page;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class RentOpt extends BaseRentOpt<RentOpt> {
	public static final RentOpt dao = new RentOpt();
	
	public Page<RentOpt> page(Controller c){
		String sName = c.getPara("sName");
		String select = "SELECT r.id,s.`name` sName,r.start_time startTime,r.end_time endTime,"
				+ "r.init_rent initRent,r.rent_point rentPoint,r.pm_fee pmFee ";
		StringBuilder sqlExceptSelect = new StringBuilder();
		List<Object> params = Lists.newArrayList();
		String classify = ShiroUtils.getClassify();
		sqlExceptSelect.append("FROM rent_opt r "
				+ "LEFT JOIN store s ON r.s_id = s.id WHERE r.flag = 1 AND s.classify='"+classify+"' ");
		if(StringUtils.isNotBlank(sName)){
			sqlExceptSelect.append("AND INSTR(s.`name`, ?) ");
			params.add(sName);
	    }
		sqlExceptSelect.append("ORDER BY s.`name`,r.start_time ");
		return this.paginate(c.getParaToInt("page"), c.getParaToInt("rows"), select, sqlExceptSelect.toString(), params.toArray());
	}
	
	public ReturnMsg saveOrUpdate(Controller c){
		Integer orgId = ShiroUtils.getOrgId();
		if(orgId == 1){
			boolean result = false;
			String id = c.getPara("id");
			String sName = c.getPara("sName");
			String startTime = c.getPara("startTime");
			String endTime = c.getPara("endTime");
			Double initRent = strToDouble(c.getPara("initRent"));
			Double rentPoint = strToDouble(c.getPara("rentPoint"));
			Double pmFee = strToDouble(c.getPara("pmFee"));
			if(StringUtils.isAnyBlank(sName, startTime, endTime)){
				return ReturnMsg.DATAERROR;
			}
			Integer sId = Store.dao.findStoreId(sName);
			RentOpt rent = new RentOpt();
			rent.set("s_id", sId)
				.set("start_time", startTime)
				.set("end_time", endTime)
				.set("pm_fee", pmFee)
				.set("init_rent", initRent)
				.set("rent_point", rentPoint);
			result = StringUtils.isNoneBlank(id) ? rent.set("id", id).update() : rent.save();
			
			generateRentBills(startTime, endTime, sId);
			
			return result ? ReturnMsg.SUCCESS : ReturnMsg.ERROR;
		}else{
			return ReturnMsg.NORIGHT;
		}
	}
	
	/**
	 * 生成营业额记录（生成该店铺按年月的开始时间到结束时间的保底租金和提成比例）
	 */
	public void generateRentBills(String startTime, String endTime, Integer sId){
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM");
		Connection conn = JdbcUtils.getConnection();
		CallableStatement cs = null;
		PreparedStatement psmt = null;
		ResultSet rs = null;
		String ym = "";
		try{
			Calendar dd = Calendar.getInstance();
			dd.setTime(sdf.parse(startTime));
			
			Calendar t = Calendar.getInstance();
			t.setTime(sdf.parse(endTime));
			t.add(Calendar.MONTH, 1);
			
			while(dd.getTime().before(t.getTime())){
				ym = sdf.format(dd.getTime());
				String sql = "SELECT count(1) count FROM rent_opt WHERE flag=1 AND init_rent<>0 "
						+ "AND DATE_FORMAT(start_time,'%Y-%m')<=? AND DATE_FORMAT(end_time,'%Y-%m')>=? AND s_id=?";
				psmt = conn.prepareStatement(sql);
				psmt.setString(1, ym);
				psmt.setString(2, ym);
				psmt.setInt(3, Integer.valueOf(sId));
				rs = psmt.executeQuery();
				while(rs.next()){
					int count = rs.getInt("count");
					if(count==1){
						cs = conn.prepareCall("{CALL rentCount1(?,?)}");
			            cs.setInt(1, sId);
			            cs.setString(2, ym);
			            cs.executeQuery();
					}else if(count==2){
						cs = conn.prepareCall("{CALL rentCount2(?,?)}");
			            cs.setInt(1, sId);
			            cs.setString(2, ym);
			            cs.executeQuery();
					}else{
						dd.add(Calendar.MONTH, 1);//进行当前日期月份加1
						continue;
					}
					dd.add(Calendar.MONTH, 1);//进行当前日期月份加1
				}
			}
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
        	JdbcUtils.closeAll(rs, cs, psmt, conn);
        }
	}
	
	public ReturnMsg deletes(String ids){
		Integer orgId = ShiroUtils.getOrgId();
		if(orgId == 1){
			boolean update = false;
			for (String id : ids.split(";")) {
				update = new RentOpt().set("id", id).set("flag", 2).update();
				if(update == false){
					break;
				}
			}
			return update ? ReturnMsg.SUCCESS : ReturnMsg.ERROR;
		}else{
			return ReturnMsg.NORIGHT;
		}
	}

	public Double strToDouble(String strMoney){
		return StringUtils.isBlank(strMoney) ? 0.0 : Double.valueOf(strMoney);
	}
	
	public ReturnMsg importRentOpts(Controller c) {
		boolean result = false;
		Workbook workbook = null;
		InputStream is = null;
		Object value = null;
		try {
			is = new FileInputStream(c.getFile().getFile());
			workbook = new XSSFWorkbook(is);
			Sheet sheet = workbook.getSheetAt(0);
			Row row = null;
			String[] fields = {"s_id","start_time","end_time","init_rent","rent_point","pm_fee"};
			for (int i = 1; i <= sheet.getLastRowNum(); i++) {
				row = sheet.getRow(i);
				if(row != null){
					RentOpt ro = new RentOpt();
					for (int j = 0; j < fields.length; j++) {
						Cell cell = row.getCell(j);
						if(cell != null){
							switch (cell.getCellType()) {
								case Cell.CELL_TYPE_STRING:
									value = cell.getRichStringCellValue().toString().trim();
									break;
								case Cell.CELL_TYPE_NUMERIC:
									short format = cell.getCellStyle().getDataFormat();
									SimpleDateFormat sdf = null;
									if (format == 14 || format == 31 || format == 57 || format == 58) {
										sdf = new SimpleDateFormat("yyyy-MM-dd");
										value = sdf.format(DateUtil.getJavaDate(cell.getNumericCellValue()));
									} else{
										value = String.valueOf(cell.getNumericCellValue());
									}
									break;
								default:
									value = "";
									break;
							}
						}
						ro.set(fields[j], value);
					}
					Cell cell0 = row.getCell(0);
					if(Objects.nonNull(cell0)){
						Integer sId = Store.dao.findStoreId(cell0.toString().trim());
						if(sId == null){
							continue;
						}
						ro.set(fields[0], sId);
					}else{
						continue;
					}
					Cell cell3 = row.getCell(3);
					if(Objects.isNull(cell3)){
						ro.set(fields[3], 0);
					}else{
						ro.set(fields[3], cell3.getNumericCellValue());
					}
					Cell cell4 = row.getCell(4);
					if(Objects.isNull(cell4)){
						ro.set(fields[4], 0);
					}else{
						ro.set(fields[4], cell4.getNumericCellValue());
					}
					Cell cell5 = row.getCell(5);
					if(Objects.isNull(cell5)){
						ro.set(fields[5], 0);
					}else{
						ro.set(fields[5], cell5.getNumericCellValue());
					}
					result = ro.save();
				}
			}
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				is.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return result ? ReturnMsg.SUCCESS : ReturnMsg.ERROR;
	}
	
	public static void main(String[] args) throws ParseException {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM");
		Connection conn = JdbcUtils.getConnection();
		CallableStatement cs = null;
		PreparedStatement psmt1 = null;
		PreparedStatement psmt2 = null;
		ResultSet rs1 = null;
		ResultSet rs2 = null;
		String ym = "";
		int i = 0;
        try {
        	psmt1 = conn.prepareStatement("select id,s_id,start_time,end_time from rent_opt where flag=1 AND init_rent<>0");
			rs1 = psmt1.executeQuery();
			while(rs1.next()){
				int sId = rs1.getInt("s_id");
				String stime = rs1.getString("start_time");
				String etime = rs1.getString("end_time");
				
				Calendar dd = Calendar.getInstance();
				dd.setTime(sdf.parse(stime));
				
				Calendar t = Calendar.getInstance();
				t.setTime(sdf.parse(etime));
				t.add(Calendar.MONTH, 1);
				
				while(dd.getTime().before(t.getTime())){
					ym = sdf.format(dd.getTime());
					String sql = "SELECT count(1) count FROM rent_opt WHERE flag=1 AND init_rent<>0 "
							+ "AND DATE_FORMAT(start_time,'%Y-%m')<=? AND DATE_FORMAT(end_time,'%Y-%m')>=? AND s_id=?";
					psmt2 = conn.prepareStatement(sql);
					psmt2.setString(1, ym);
					psmt2.setString(2, ym);
					psmt2.setInt(3, sId);
					rs2 = psmt2.executeQuery();
					if(rs2.next()){
						int count = rs2.getInt("count");
						if(count==1){
							cs = conn.prepareCall("{CALL rentCount1(?,?)}");
				            cs.setInt(1, sId);
				            cs.setString(2, ym);
				            cs.executeQuery();
						}else if(count==2){
							cs = conn.prepareCall("{CALL rentCount2(?,?)}");
				            cs.setInt(1, sId);
				            cs.setString(2, ym);
				            cs.executeQuery();
						}else{
							continue;
						}
						dd.add(Calendar.MONTH, 1);//进行当前日期月份加1
						i++;
					}
				}
			}
			System.out.println("循环次数："+i);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
        	JdbcUtils.closeAll(rs2, null, psmt2, null);
        	JdbcUtils.closeAll(rs1, cs, psmt1, conn);
        }
	}
}
